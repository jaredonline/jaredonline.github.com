---
layout: post
title: "Serving a static website with Heroku"
date: 2012-03-05 19:21
comments: true
categories: 
---

%p
  I recently wanted to setup a very simple static HTML site for 
  a friend’s school project. I didn’t want to go through the 
  hassle of setting up hosting, I just wanted to put it somewhere.

%p
  In the past I’ve used Heroku for this, but I’d never setup a 
  static site there.

%p
  This is how I did it.
  
/ more

%h2 Stasis

%p
  I used stasis to generate the content. It’s an extremely awesome 
  static site generator using Ruby and all sorts of templating engines. 
  I opted for HAML and SASS.

%p
  My file structure looked something like this:

%pre
  :preserve
    root/
     |
      - config.ru
      - Procfile
      - Gemfile
      - controller.rb
      - index.html.haml
      - layout.html.haml
      - sub_dir/
      - stylesheets/
        |
         - style.css.sass
      - images/

%p
  I’ll talk about the config.ru and Procfile later. You can checkout stasis if you 
  want to learn more about it’s structure.

%p
  My Gemfile contained the gems necessary for development and deployment, and it looks like this:

```ruby
source :rubygems

gem "haml"
gem "sass"
gem "unicorn"

gem "rack-contrib"

group :development do
  gem "heroku"
  gem "foreman"
end
```
  
%h2 Rack
%p The config.ru is to tell Heroku to use Rack to serve the website. It looks like this:

```ruby
use Rack::Static,  :urls => ["/stylesheets", "/images"], :root => "public"
run Rack::Directory.new("public")

run lambda { |env|
  [
    200, 
    {
      'Content-Type'  => 'text/html', 
      'Cache-Control' => 'public, max-age=86400' 
    },
    File.open('public/index.html', File::RDONLY)
  ]
}
```

%p  
  The Rack::Static line tells it to serve the contents of the directories “public/stylesheets” 
  and “public/images” as static content.

%p
  The Rack::Directory.new("public") line tells Rack to look for requests matching the contents of 
  the “public” directory and serve the corresponding files.

%p
  The last block, the lambda { |env| block, tells Rack to default to rendering the file found 
  at “public/index.html”. This makes “/” work.

%h2 Foreman
%p Heroku uses Foreman. It uses a Procfile in the current working directory to tell it what processes to start and monitor.

%p
  My Procfile looks like this:

```ruby
web: bundle exec unicorn -p $PORT
```

%h2 Heroku
%p Now to tie it all together. You’ll need to create a new app on Heroku like so:

```sh
heroku apps:create --stack cedar [NAME OF YOUR APP]
```

%p Then simply

```sh
git push heroku master
```
  
%p
  and you should be working!